package com.agree.abt.service.devmanager.impl;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.stream.FileImageInputStream;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

<<<<<<< .mine
=======
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

>>>>>>> .r837
import com.agree.abt.model.devmanager.AdvertManageInfo;
import com.agree.abt.service.devmanager.IAdvertImageService;
import com.agree.framework.web.common.ServiceReturn;
import com.agree.framework.web.service.base.BaseService;
import com.agree.util.IDictABT;

public class AdvertImageServiceImpl extends BaseService implements IAdvertImageService {

	private static final Logger logger = LoggerFactory.getLogger(AdvertImageServiceImpl.class);

	public ServiceReturn addImg(JSONObject json, File file) throws Exception {
		ServiceReturn sRet = new ServiceReturn(ServiceReturn.SUCCESS, "");
		json.accumulate("contentType", "2");
		AdvertManageInfo advertImage = (AdvertManageInfo)JSONObject.toBean(json, AdvertManageInfo.class);
		FileImageInputStream fiis = null;
		ByteArrayOutputStream bos = null;
		try {
			fiis = new FileImageInputStream(file);
			byte[] b = new byte[1024];
			bos = new ByteArrayOutputStream();
			int n;
			while ((n = fiis.read(b)) != -1) {
				bos.write(b, 0, n);
			}
//			advertImage.setContent(new Base64().encode(bos.toByteArray()));
			advertImage.setContent( bos.toByteArray());
			sqlDao_h.saveRecord(advertImage);
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			sRet.setErrmsg("添加设备图片错误,service addImg方法执行失败!");
			sRet.setSuccess(ServiceReturn.FAILURE);
		} finally {
			try {
				if(bos!=null){
					bos.close();
				}
				if(fiis!=null){
					fiis.close();
				}
			} catch (IOException e) {
				logger.error(e.getMessage(),e);
			}
		}
		return sRet;
	}

	public ServiceReturn delImg(JSONArray ids) throws Exception {
		ServiceReturn sRet = new ServiceReturn(ServiceReturn.SUCCESS, "");
		String error = "";
		for (int i = 0;i<ids.size();i++) {
			String content_id = JSONObject.fromObject(ids.get(i)).getString("content_id");
			try {
				sqlDao_h.deleteById(AdvertManageInfo.class, content_id);
			} catch (Exception e) {
				sRet.setSuccess(ServiceReturn.FAILURE);
				error += "|编号为:"+content_id+"的图片删除失败|";
			}
		}
		sRet.setErrmsg(error);
		return sRet;
	}
	
	// 获取图片byte数组(该功能已暂停使用)
	/*public byte[] getImgByte(String content) {
		AdvertManageInfo advertImage = sqlDao_h.getRecordById(AdvertManageInfo.class, content);
		return new Base64().decode(advertImage.getContent());
		//return null;
	}*/

	public long queryImgNumByBranch(Map<String, String> map) throws Exception {
		Map<String, String> queryMap = new HashMap<String, String>();
		queryMap.put(IDictABT.BRANCH, map.get(IDictABT.BRANCH));
		queryMap.put("device_type", map.get("device_type"));
		return sqlDao_h.getRecordCount("select count(branch) from AdvertManageInfo where branch = :branch and device_type = :device_type", queryMap);
	}

}
